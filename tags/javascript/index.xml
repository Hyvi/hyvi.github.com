<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elon`s Blog – javascript</title>
    <link>/tags/javascript/</link>
    <description>Recent content in javascript on Elon`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs:  javascript Number --- 再次结识</title>
      <link>/docs/javascript/2013-01-28-javascript_number_nan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/javascript/2013-01-28-javascript_number_nan/</guid>
      <description>
        
        
        &lt;p&gt;javascript类型划为两大类：原始类型（甭管这样的翻译是否规范，英文为primitive type) 和 对象类型。原始类型又划为四大类：数值、字符串、布尔值，还有两个特殊的类型：null 和 undefined 。 
废话少说，直接进入主题：&lt;em&gt;javascript number的几点&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与其他语言相比，javascript number不同点&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript does not make a distinction between integer values
and floating-point values. All numbers in JavaScript are represented as floating-&amp;gt;point values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;javascript number表达的数值是有限的，于是就有overflow, underflow。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Arithmetic in JavaScript does not raise errors in cases of overflow, underflow, or division by zero.
(-)Infinity when overflow, (-)0 when underflow 
Division by zero is not an error in JavaScript: it simply returns infinity or negative
infinity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;javascript number 中特殊的NaN&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;There is one exception, however: zero divided by zero does not have a well-defined value, and the result of this operation is the special not-a-number value, printed as  NaN.  NaN  also arises if you attempt to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;divide infinity by infinity&lt;/li&gt;
&lt;li&gt;take the square root of a negative number&lt;/li&gt;
&lt;li&gt;use arithmetic operators with non-numeric operands that
cannot be converted to numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;
	Infinity // A read/write variable initialized to Infinity.
	Number.POSITIVE_INFINITY // Same value, read-only.
	1/0 // This is also the same value.
	Number.MAX_VALUE + 1 // This also evaluates to Infinity.
	Number.NEGATIVE_INFINITY // These expressions are negative infinity.
	-Infinity
	-1/0 
	-Number.MAX_VALUE - 1
	NaN // A read/write variable initialized to NaN.
	Number.NaN // A read-only property holding the same value.
	0/0 // Evaluates to NaN.
	Number.MIN_VALUE/2 // Underflow: evaluates to 0
	-Number.MIN_VALUE/2 // Negative zero
	-1/Infinity // Also negative 0
	-0
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;javascript NaN != NaN&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The not-a-number value has one unusual feature in JavaScript: it does not compare equal to any other value, including itself. This means that you can’t write x == NaN to determine whether the value of a variable xis  NaN. Instead, you should write  x != x. That expression will be true if, and only if, x is NaN. The function isNaN()is similar. It returns trueif its argument is NaN, or if that argument is a non-numeric value such as a string or an object. The related function isFinite()returns trueif its argument is a number other than NaN, Infinity, or -Infinity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;.3-.2 == .1 &amp;amp; .2-.1 == .1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-0 === 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;
    var zero = 0; // Regular zero
    var negz = -0; // Negative zero
    zero === negz // =&gt; true: zero and negative zero are equal 
    1/zero === 1/negz // =&gt; false: infinity and -infinity are not equal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这算是对之前文章http://hyvi.sinaapp.com/2012/10/09/javascript-nan/ 做了个补充。
twitter上的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  
    [0,7,5,10,4,15,2,13,4,16,4,10,1].map(function(a){return this[a];},typeof(&#34;&#34;)+typeof(0)+NaN+&#34;d.&#34;).join(&#34;&#34;) 
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: nodejs</title>
      <link>/docs/javascript/2012-11-21-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/javascript/2012-11-21-nodejs/</guid>
      <description>
        
        
        &lt;h2 id=&#34;done&#34;&gt;DONE&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用c++写node本地插件，&lt;a href=&#34;https://github.com/joyent/node/tree/master/test/addons/hello-world&#34;&gt;hello-world&lt;/a&gt;. 编译构建使用&lt;a href=&#34;https://github.com/TooTallNate/node-gyp&#34;&gt;node-gyp&lt;/a&gt;
其中对c++代码不太熟悉，好难懂的样子，回头学习下&lt;em&gt;TODO&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;性能测试，群里聊到Siege， brenchmark.js， ab(apache benchmark)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/hunvreus/api-plus-static-clients&#34;&gt;API + Static Clients&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对cors技术解决方案&lt;/li&gt;
&lt;li&gt;对session实现的技术方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://weibo.com/1880082254/z5KR7zF4t?type=repost&#34;&gt;CMD vs AMD&lt;/a&gt; 理解CommonJS与RequireJS&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

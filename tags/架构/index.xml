<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elon`s Blog – 架构</title>
    <link>/tags/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Elon`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 26 May 2022 16:09:34 +0800</lastBuildDate>
    
	  <atom:link href="/tags/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 云原生模式 CLOUD NATIVE PATTERNS</title>
      <link>/docs/architecture/2022-05-26-cloud-native-pattern/</link>
      <pubDate>Thu, 26 May 2022 16:09:34 +0800</pubDate>
      
      <guid>/docs/architecture/2022-05-26-cloud-native-pattern/</guid>
      <description>
        
        
        &lt;p&gt;随着底层基础设施的云原生的流行，对上层应用的开发模式带来了变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ContainerSolutions/cloud-native-patterns/master/assets/images/Screenshot%202020-01-06%20at%2014.07.47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;refs&#34;&gt;Refs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Cloud Native Pattern: &lt;a href=&#34;https://github.com/ContainerSolutions/cloud-native-patterns&#34;&gt;https://github.com/ContainerSolutions/cloud-native-patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cornelia Davis: Cloud Native Patterns_ Designing change-tolerant software.pdf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pini Reznik, Jamie Dobson &amp;amp; Michelle Gienow: cloud-native-transformation-practical-patterns-for-innovation
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;  ·End·  &lt;/center&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 如何构建基础库</title>
      <link>/docs/team/2022-05-22-go-library-build/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/docs/team/2022-05-22-go-library-build/</guid>
      <description>
        
        
        &lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;提供一个库，沉淀共性的功能点。&lt;/p&gt;
&lt;p&gt;是Library，而不是 Framework。&lt;/p&gt;
&lt;p&gt;有哪些内容呢？&lt;/p&gt;
&lt;h2 id=&#34;参考1-gitlab-labkit&#34;&gt;参考1 Gitlab Labkit&lt;/h2&gt;
&lt;p&gt;LabKit is minimalist library to provide functionality for Go services at GitLab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correlation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loggging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Masking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metrics&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;FIPS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tracing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ErrorTracking&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考2-go-zero&#34;&gt;参考2 go-zero&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;鉴权&lt;/li&gt;
&lt;li&gt;加解密&lt;/li&gt;
&lt;li&gt;日志记录&lt;/li&gt;
&lt;li&gt;异常捕获&lt;/li&gt;
&lt;li&gt;监控报警&lt;/li&gt;
&lt;li&gt;数据统计&lt;/li&gt;
&lt;li&gt;并发控制&lt;/li&gt;
&lt;li&gt;链路追踪&lt;/li&gt;
&lt;li&gt;超时控制&lt;/li&gt;
&lt;li&gt;自动熔断&lt;/li&gt;
&lt;li&gt;自动降载&lt;/li&gt;
&lt;li&gt;缓存控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考3-micro&#34;&gt;参考3 Micro&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://micro.dev/architecture&#34;&gt;Micro Architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://micro.dev/images/micro-3.0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Wrapppers are a form of middleware that can be used with go-micro services, They can Wrap both the Client and Server handlers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Breaker&lt;/li&gt;
&lt;li&gt;endpoint&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;ratelimiter&lt;/li&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;trace&lt;/li&gt;
&lt;li&gt;validator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考4-dapr&#34;&gt;参考4 Dapr&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 迁移线上服务方案</title>
      <link>/docs/architecture/2019-09-16-upgrade-online-service/</link>
      <pubDate>Mon, 16 Sep 2019 16:09:34 +0800</pubDate>
      
      <guid>/docs/architecture/2019-09-16-upgrade-online-service/</guid>
      <description>
        
        
        &lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;迁移服务器或者服务升级的事情时，需要对使用方来说是无感知的&lt;br&gt;
那怎么做到新旧代码或者新旧服务的平稳过渡呢？ 根据不同的情况具体的方案也是不一样的。&lt;/p&gt;
&lt;h2 id=&#34;调研&#34;&gt;调研&lt;/h2&gt;
&lt;p&gt;对各大公司进行做服务升级或者迁移的方案学习。吸取有用的方案。&lt;/p&gt;
&lt;h3 id=&#34;模拟客户端的请求前端做灰度上线&#34;&gt;模拟客户端的请求，前端做灰度上线&lt;/h3&gt;
&lt;p&gt;部署新旧服务， 完成AB测试， 灰度上线&lt;br&gt;
数据库数据怎么解决的？&lt;/p&gt;
&lt;h2 id=&#34;可行的方案&#34;&gt;可行的方案&lt;/h2&gt;
&lt;p&gt;结合目前的我们的基础设施，可执行的方案。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h2&gt;
&lt;p&gt;最后，我们的最佳实践是什么，我们实践后的总结&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hyvi.github.io&#34;&gt;记一次从Rails直Golang的接口迁移&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;center&gt;  ·End·  &lt;/center&gt;

      </description>
    </item>
    
  </channel>
</rss>
